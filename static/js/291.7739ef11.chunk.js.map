{"version":3,"file":"static/js/291.7739ef11.chunk.js","mappings":"kTAEMA,EAAO,gCACPC,EAAM,mCAEL,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAuBC,GAAvB,gGAEoBC,EAAAA,EAAAA,IAAUD,GAF9B,cAEGE,EAFH,yBAGIA,GAHJ,sCAKHC,QAAQC,IAAI,KAAMC,SACZ,IAAIC,MAAM,KAAMD,SANnB,gFAUA,SAAeE,IAAtB,4CAAO,OAAP,oBAAO,uGACER,EAAQ,GAAD,OAAIF,EAAJ,oCAAoCC,EAApC,aADT,kEAIA,SAASU,EAAiBR,GAC/B,OAAOD,EAAQ,GAAD,OAAIF,EAAJ,gCAAgCC,EAAhC,kBAA6CE,EAA7C,WACf,CAEM,SAASS,EAAaC,GAC3B,OAAOX,EAAQ,GAAD,OAAIF,EAAJ,iBAAiBa,EAAjB,oBAAoCZ,GACnD,CAEM,SAASa,EAAaD,GAC3B,OAAOX,EAAQ,GAAD,OAAIF,EAAJ,iBAAiBa,EAAjB,4BAA4CZ,GAC3D,CAEM,SAASc,EAAgBF,GAC9B,OAAOX,EAAQ,GAAD,OAAIF,EAAJ,iBAAiBa,EAAjB,4BAA4CZ,GAC3D,C,uNCqFD,EA1Gc,WAAO,IAAD,IACVe,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,WAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,YAA1B,eAAOG,EAAP,KAAcC,EAAd,KAEAhB,QAAQC,IAAIc,GAEZ,IAAME,GAAWC,EAAAA,EAAAA,MAEXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAkBpD,OAhBAC,EAAAA,EAAAA,YAAU,WACJb,IACFJ,EAAAA,EAAAA,IAAaI,GACVc,MAAK,SAAAzB,GACJiB,EAASjB,EAAS0B,MAClBX,EAAU,WACX,IACAY,OAAM,SAAAC,GACL3B,QAAQC,IAAI0B,GACZb,EAAU,QACX,GAIN,GAAE,IAEY,YAAXD,GAEA,SAAC,KAAD,CACEe,OAAO,KACPC,MAAM,KACNC,OAAO,KACPC,MAAM,UACNC,UAAU,gBACVC,aAAc,CAAC,EACfC,SAAS,IAIA,UAAXrB,GACK,SAACsB,EAAA,EAAD,IAEM,aAAXtB,GACEE,GAEA,4BACE,SAAC,KAAD,CAAMqB,GAAIjB,EAAakB,QAAvB,sBACA,yBAAU,OAALtB,QAAK,IAALA,OAAA,EAAAA,EAAOuB,SAAP,OAAgBvB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOwB,SAE5B,gBACEC,IACEzB,EAAM0B,YAAN,0CACuC1B,EAAM0B,aACzCC,EAENC,KAAU,OAAL5B,QAAK,IAALA,OAAA,EAAAA,EAAOuB,SAAP,OAAgBvB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOwB,SAG9B,wCAAgBxB,EAAM6B,aAAaC,QAAQ,OAC3C,4BACE,sCACA,uBAAI9B,EAAM+B,eAGZ,4BACE,oCACA,wBACG/B,EAAMgC,OAAOC,KAAI,SAAAC,GAChB,OAAO,wBAAqBA,EAAKV,MAAjBU,EAAKV,KACtB,UAGL,0BACE,2BACE,yBACE,SAAC,KAAD,CAAMH,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,6BAIN,SAAC,EAAAc,SAAD,CACEC,UACE,SAAC,KAAD,CACEvB,OAAO,KACPC,MAAM,KACNC,OAAO,KACPC,MAAM,UACNC,UAAU,gBACVC,aAAc,CAAC,EACfC,SAAS,IATf,UAaE,SAAC,KAAD,cArDV,CA6DD,C","sources":["api.ts","pages/Movie/Movie.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE = 'https://api.themoviedb.org/3/';\nconst KEY = 'f5947bee69b0eabce6ba631e79612468';\n\nexport async function getData(query: string) {\n  try {\n    const response = await axios.get(query);\n    return response;\n  } catch (error: any) {\n    console.log(error.message);\n    throw new Error(error.message);\n  }\n}\n\nexport async function getTrendedMovies() {\n  return getData(`${BASE}trending/all/day?api_key=${KEY}&page=1`);\n}\n\nexport function getMoviesByQuery(query: string) {\n  return getData(`${BASE}search/movie?api_key=${KEY}&query=${query}&page=1`);\n}\n\nexport function getMovieData(movieID: string) {\n  return getData(`${BASE}movie/${movieID}?api_key=${KEY}`);\n}\n\nexport function getMovieCast(movieID: string) {\n  return getData(`${BASE}movie/${movieID}/credits?api_key=${KEY}`);\n}\n\nexport function getMovieReviews(movieID: string) {\n  return getData(`${BASE}movie/${movieID}/reviews?api_key=${KEY}`);\n}\n","import React, { useState, useEffect, Suspense, useRef } from 'react';\nimport { Outlet, Link, useLocation } from 'react-router-dom';\nimport ErrorPage from '../ErrorPage/ErrorPage';\n\nimport { getMovieData } from '../../api';\n\nimport { useParams } from 'react-router-dom';\nimport placeholderPoster from './../../images/placeholder-poster.jpg';\nimport { Watch } from 'react-loader-spinner';\n\nimport { IMovie } from '../../interfaces';\n\nconst Movie = () => {\n  const { movieId } = useParams();\n  const [status, setStatus] = useState('pending');\n  const [movie, setMovie] = useState<IMovie>();\n\n  console.log(movie);\n\n  const location = useLocation();\n\n  const backLinkHref = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    if (movieId) {\n      getMovieData(movieId)\n        .then(response => {\n          setMovie(response.data);\n          setStatus('resolved');\n        })\n        .catch(error => {\n          console.log(error);\n          setStatus('error');\n        });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (status === 'pending') {\n    return (\n      <Watch\n        height=\"80\"\n        width=\"80\"\n        radius=\"48\"\n        color=\"#4fa94d\"\n        ariaLabel=\"watch-loading\"\n        wrapperStyle={{}}\n        visible={true}\n      />\n    );\n  }\n  if (status === 'error') {\n    return <ErrorPage />;\n  }\n  if (status === 'resolved') {\n    if (movie) {\n      return (\n        <div>\n          <Link to={backLinkHref.current}>Go back</Link>\n          <h2>{movie?.title || movie?.name}</h2>\n\n          <img\n            src={\n              movie.poster_path\n                ? `https://image.tmdb.org/t/p/w300/${movie.poster_path}`\n                : placeholderPoster\n            }\n            alt={movie?.title || movie?.name}\n          />\n\n          <p>User Score: {movie.vote_average.toFixed(1)}</p>\n          <div>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n          </div>\n\n          <div>\n            <h3>Genres</h3>\n            <ul>\n              {movie.genres.map(item => {\n                return <li key={item.name}>{item.name}</li>;\n              })}\n            </ul>\n          </div>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"cast\">Cast</Link>\n              </li>\n              <li>\n                <Link to=\"reviews\">Reviews</Link>\n              </li>\n            </ul>\n          </nav>\n          <Suspense\n            fallback={\n              <Watch\n                height=\"80\"\n                width=\"80\"\n                radius=\"48\"\n                color=\"#4fa94d\"\n                ariaLabel=\"watch-loading\"\n                wrapperStyle={{}}\n                visible={true}\n              />\n            }\n          >\n            <Outlet />\n          </Suspense>\n        </div>\n      );\n    } else {\n      //some default movie data\n    }\n  }\n};\n\nexport default Movie;\n"],"names":["BASE","KEY","getData","query","axios","response","console","log","message","Error","getTrendedMovies","getMoviesByQuery","getMovieData","movieID","getMovieCast","getMovieReviews","movieId","useParams","useState","status","setStatus","movie","setMovie","location","useLocation","backLinkHref","useRef","state","from","useEffect","then","data","catch","error","height","width","radius","color","ariaLabel","wrapperStyle","visible","ErrorPage","to","current","title","name","src","poster_path","placeholderPoster","alt","vote_average","toFixed","overview","genres","map","item","Suspense","fallback"],"sourceRoot":""}